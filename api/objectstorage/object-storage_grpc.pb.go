// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: object-storage.proto

package objectstorage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ObjectStorage_Upload_FullMethodName = "/objectStorage.ObjectStorage/Upload"
	ObjectStorage_Get_FullMethodName    = "/objectStorage.ObjectStorage/Get"
)

// ObjectStorageClient is the client API for ObjectStorage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ObjectStorageClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (ObjectStorage_UploadClient, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (ObjectStorage_GetClient, error)
}

type objectStorageClient struct {
	cc grpc.ClientConnInterface
}

func NewObjectStorageClient(cc grpc.ClientConnInterface) ObjectStorageClient {
	return &objectStorageClient{cc}
}

func (c *objectStorageClient) Upload(ctx context.Context, opts ...grpc.CallOption) (ObjectStorage_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &ObjectStorage_ServiceDesc.Streams[0], ObjectStorage_Upload_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &objectStorageUploadClient{stream}
	return x, nil
}

type ObjectStorage_UploadClient interface {
	Send(*File) error
	CloseAndRecv() (*UploadResponse, error)
	grpc.ClientStream
}

type objectStorageUploadClient struct {
	grpc.ClientStream
}

func (x *objectStorageUploadClient) Send(m *File) error {
	return x.ClientStream.SendMsg(m)
}

func (x *objectStorageUploadClient) CloseAndRecv() (*UploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *objectStorageClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (ObjectStorage_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &ObjectStorage_ServiceDesc.Streams[1], ObjectStorage_Get_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &objectStorageGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ObjectStorage_GetClient interface {
	Recv() (*File, error)
	grpc.ClientStream
}

type objectStorageGetClient struct {
	grpc.ClientStream
}

func (x *objectStorageGetClient) Recv() (*File, error) {
	m := new(File)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ObjectStorageServer is the server API for ObjectStorage service.
// All implementations must embed UnimplementedObjectStorageServer
// for forward compatibility
type ObjectStorageServer interface {
	Upload(ObjectStorage_UploadServer) error
	Get(*GetRequest, ObjectStorage_GetServer) error
	mustEmbedUnimplementedObjectStorageServer()
}

// UnimplementedObjectStorageServer must be embedded to have forward compatible implementations.
type UnimplementedObjectStorageServer struct {
}

func (UnimplementedObjectStorageServer) Upload(ObjectStorage_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedObjectStorageServer) Get(*GetRequest, ObjectStorage_GetServer) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedObjectStorageServer) mustEmbedUnimplementedObjectStorageServer() {}

// UnsafeObjectStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ObjectStorageServer will
// result in compilation errors.
type UnsafeObjectStorageServer interface {
	mustEmbedUnimplementedObjectStorageServer()
}

func RegisterObjectStorageServer(s grpc.ServiceRegistrar, srv ObjectStorageServer) {
	s.RegisterService(&ObjectStorage_ServiceDesc, srv)
}

func _ObjectStorage_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ObjectStorageServer).Upload(&objectStorageUploadServer{stream})
}

type ObjectStorage_UploadServer interface {
	SendAndClose(*UploadResponse) error
	Recv() (*File, error)
	grpc.ServerStream
}

type objectStorageUploadServer struct {
	grpc.ServerStream
}

func (x *objectStorageUploadServer) SendAndClose(m *UploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *objectStorageUploadServer) Recv() (*File, error) {
	m := new(File)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ObjectStorage_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ObjectStorageServer).Get(m, &objectStorageGetServer{stream})
}

type ObjectStorage_GetServer interface {
	Send(*File) error
	grpc.ServerStream
}

type objectStorageGetServer struct {
	grpc.ServerStream
}

func (x *objectStorageGetServer) Send(m *File) error {
	return x.ServerStream.SendMsg(m)
}

// ObjectStorage_ServiceDesc is the grpc.ServiceDesc for ObjectStorage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ObjectStorage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "objectStorage.ObjectStorage",
	HandlerType: (*ObjectStorageServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _ObjectStorage_Upload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Get",
			Handler:       _ObjectStorage_Get_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "object-storage.proto",
}
